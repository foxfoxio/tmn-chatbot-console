{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RootContainer","styled","div","ColContainer","Container","session_id","uuidv5","DNS","API_KEY","api_uri","FLOWS","index","App","useState","request","setRequest","response","setResponse","text","setText","list","setList","setLoading","logs","setLogs","send","a","console","log","fetch","res","json","useEffect","length","headers","body","JSON","stringify","method","makeRequest","readOnly","value","onSubmit","e","preventDefault","typed","onChange","target","defaultValue","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6xBAKA,IAAMA,EAAgBC,IAAOC,IAAV,KAQbC,EAAeF,IAAOC,IAAV,KAYZE,EAAYH,IAAOC,IAAV,KAQTG,EAAaC,IAAOC,IACpBC,EAAU,mCAMVC,EAAU,iEA4BVC,EAFY,CAAC,yGAAqB,cAQpCC,EAAQ,EA8GGC,MA5Gf,WAAgB,IAAD,EACiBC,qBADjB,mBACNC,EADM,KACGC,EADH,OAEmBF,qBAFnB,mBAENG,EAFM,KAEIC,EAFJ,OAGWJ,qBAHX,mBAGNK,EAHM,KAGAC,EAHA,OAIWN,mBAAS,IAJpB,mBAINO,EAJM,KAIAC,EAJA,OAKiBR,oBAAS,GAL1B,mBAKGS,GALH,aAMWT,mBAAS,IANpB,mBAMNU,EANM,KAMAC,EANA,KAwBPC,EAAI,uCAAG,WAAMhB,GAAN,iBAAAiB,EAAA,6DACXC,QAAQC,IAAI,QAASnB,GAErBa,GAAW,GAHA,SAIOO,MAAMpB,EAASK,GAJtB,cAILgB,EAJK,gBAKQA,EAAIC,OALZ,OAKLA,EALK,OAOXT,GAAW,GAEXK,QAAQC,IAAI,QAASG,GACrBd,EAAYc,GAVD,4CAAH,sDA6CV,OApBAC,qBAAU,WACJrB,EAAQD,EAAMuB,OAAS,GAC3Bd,EAAQT,EAAMC,QAEb,CAACS,IAEJY,qBAAU,WACHhB,GACLK,GAAQ,SAAAD,GAAI,OAAKJ,GAAL,mBAAkBI,SAC7B,CAACJ,IAEJgB,qBAAU,WACHd,GArDa,SAACb,EAAYa,GAC/B,IAAMgB,EAAU,CACd,eAAgB,mBAChB,YAAa1B,GAGT2B,EAAOC,KAAKC,UAAU,CAAEhC,aAAYa,SAO1CH,EANY,CACVuB,OAAQ,OACRJ,UACAC,SA4CFI,CAAYlC,EAAYa,KACvB,CAACA,IAEJc,qBAAU,WACRb,EAAQT,EAAM,MACb,IAGD,kBAACV,EAAD,KACE,kBAACG,EAAD,KACE,yCACA,8BACE,2BAAOqC,UAAQ,EAACC,MAAOhC,IAAY,KAErC,4CACA,8BACE,2BAAO+B,UAAQ,EAACC,MAAOpC,KAEzB,yCACA,8BACE,2BAAOmC,UAAQ,EAACC,MAAOjC,MAG3B,kBAACL,EAAD,KACE,yCACA,2BAAOqC,UAAQ,EAACC,MAAOL,KAAKC,UAAUd,MAExC,0BAAMmB,SA/CO,SAAAC,GACfA,EAAEC,iBAEFpB,GAAQ,SAAAqB,GAAK,4BAAQA,GAAR,CAAe3B,OAC5BO,EAAKhB,KA4CD,kBAACN,EAAD,KACE,yCACA,2BAAO2C,SAvDE,SAAAH,GACf,IAAMzB,EAAOyB,EAAEI,OAAON,MACtBtB,EAAQD,IAqDyB8B,aAAc9B,IACzC,0CAGJ,kBAACd,EAAD,KACGgB,EAAK6B,KAAI,SAACN,EAAGO,GAAJ,OACR,yBAAKC,IAAKD,GACR,8BAzGGnB,EAyGUY,EAxGhBP,KAAKC,UAAUN,EAAM,KAAM,QAyGxB,8BA1GG,IAAAA,QC1DKqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.0f491a4d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled'\nimport './App.css'\nimport { v5 as uuidv5 } from 'uuid'\n\nconst RootContainer = styled.div`\n  width: 99%;\n  margin: 4px;\n\n  input {\n    width: 100%;\n  }\n`\nconst ColContainer = styled.div`\n  display: flex;\n  width: 100%;\n\n  button {\n    width: 56px;\n  }\n\n  span {\n    display: contents;\n  }\n`\nconst Container = styled.div`\n  pre {\n    display: block;\n    width: 100%;\n    height: fit-content;\n  }\n`\n\nconst session_id = uuidv5.DNS\nconst API_KEY = 'edf1ca88a09546f8a0667c81c93d1f31'\n// const API_KEY = '381b0ac187994f82bdc05c09d1034afa'\n\n// const api_uri = 'https://asia-east2-tmn-chatbot-integration.cloudfunctions.net/webhook'\n// const api_uri ='https://gourmet-surprising-sorted-projected.trycloudflare.com/tmn-chatbot-integration/asia-east2/webhook'\n// const api_uri = 'http://localhost:5001/tmn-chatbot-integration/asia-east2/webhook'\nconst api_uri = 'https://asia-east2-acm-clt-chatbots.cloudfunctions.net/webhook'\n// const api_uri = 'https://excess-diagnostic-recruiting-jet.trycloudflare.com/tmn-chatbot-integration/asia-east2/webhook'\nconst _0a_input_phone_nid_bday = [\n  'สวัสดี',\n  'เข้าระบบ',\n  'ลืมรหัสผ่าน',\n  'เปลี่ยน/ล้าง',\n  'จำได้เข้าemailไม่ได้',\n  '0812345678',\n  '3589900012034',\n  '23/01/1979'\n]\n\nconst _0b_input_phone = ['สวัสดี', 'เข้าระบบ', 'การเข้าสู่ระบบ', 'ลองแล้วไม่ได้', '0812345678']\nconst _contact = [\n  'ติดต่อเจ้าหน้าที่',\n  'ออก',\n  'เข้าระบบ',\n  'ลืมรหัสผ่าน',\n  'เปลี่ยน/ล้าง',\n  'จำได้เข้าemailไม่ได้',\n  '0812345678',\n  '3589900012034',\n  '23/01/1979'\n]\n\nconst _contact2 = ['ติดต่อเจ้าหน้าที่', '0812345678']\n\nconst FLOWS = _contact2\n\nconst pretty = json => {\n  return JSON.stringify(json, null, '  ')\n}\n\nlet index = 0\n\nfunction App() {\n  const [request, setRequest] = useState()\n  const [response, setResponse] = useState()\n  const [text, setText] = useState()\n  const [list, setList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [logs, setLogs] = useState([])\n\n  const makeRequest = (session_id, text) => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'x-api-key': API_KEY\n    }\n\n    const body = JSON.stringify({ session_id, text })\n    const req = {\n      method: 'POST',\n      headers,\n      body\n    }\n\n    setRequest(req)\n  }\n\n  const send = async api_uri => {\n    console.log('send:', api_uri)\n\n    setLoading(true)\n    const res = await fetch(api_uri, request)\n    const json = await res.json()\n\n    setLoading(false)\n\n    console.log('json:', json)\n    setResponse(json)\n  }\n\n  const onChange = e => {\n    const text = e.target.value\n    setText(text)\n  }\n\n  const onSubmit = e => {\n    e.preventDefault()\n\n    setLogs(typed => [...typed, text])\n    send(api_uri)\n  }\n\n  useEffect(() => {\n    if (index > FLOWS.length - 1) return\n    setText(FLOWS[index++])\n    // setText(FLOWS[0])\n  }, [list])\n\n  useEffect(() => {\n    if (!response) return\n    setList(list => [response, ...list])\n  }, [response])\n\n  useEffect(() => {\n    if (!text) return\n    makeRequest(session_id, text)\n  }, [text])\n\n  useEffect(() => {\n    setText(FLOWS[0])\n  }, [])\n\n  return (\n    <RootContainer>\n      <ColContainer>\n        <span>api_uri</span>\n        <span>\n          <input readOnly value={api_uri} />{' '}\n        </span>\n        <span>session_id</span>\n        <span>\n          <input readOnly value={session_id} />\n        </span>\n        <span>api_key</span>\n        <span>\n          <input readOnly value={API_KEY} />\n        </span>\n      </ColContainer>\n      <ColContainer>\n        <span>History</span>\n        <input readOnly value={JSON.stringify(logs)} />\n      </ColContainer>\n      <form onSubmit={onSubmit}>\n        <ColContainer>\n          <span>Message</span>\n          <input onChange={onChange} defaultValue={text} />\n          <button>SEND</button>\n        </ColContainer>\n      </form>\n      <Container>\n        {list.map((e, i) => (\n          <div key={i}>\n            <pre>{pretty(e)}</pre>\n            <hr />\n          </div>\n        ))}\n      </Container>\n    </RootContainer>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}